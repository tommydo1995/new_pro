#!/usr/bin/env python3
"""
üöÄ Notion Clone Smart Launcher
T·ª± ƒë·ªông detect environment v√† kh·ªüi ƒë·ªông ·ª©ng d·ª•ng
"""
import os
import sys
import subprocess
import shutil
from pathlib import Path

def print_colored(text, color="white"):
    """Print colored text"""
    colors = {
        "red": "\033[91m",
        "green": "\033[92m", 
        "yellow": "\033[93m",
        "blue": "\033[94m",
        "purple": "\033[95m",
        "cyan": "\033[96m",
        "white": "\033[97m",
        "reset": "\033[0m"
    }
    print(f"{colors.get(color, colors['white'])}{text}{colors['reset']}")

def check_uv():
    """Ki·ªÉm tra UV c√≥ s·∫µn kh√¥ng"""
    return shutil.which("uv") is not None

def check_python():
    """Ki·ªÉm tra Python c√≥ s·∫µn kh√¥ng"""
    return shutil.which("python") is not None

def run_with_uv():
    """Ch·∫°y v·ªõi UV environment"""
    try:
        print_colored("üì¶ ƒê·ªìng b·ªô dependencies v·ªõi UV...", "blue")
        result = subprocess.run(["uv", "sync"], capture_output=True, text=True)
        
        if result.returncode == 0:
            print_colored("‚úÖ Dependencies ƒë√£ s·∫µn s√†ng", "green")
        else:
            print_colored("‚ö†Ô∏è Warning trong sync dependencies", "yellow")
            print(result.stderr)
        
        print_colored("üöÄ Kh·ªüi ƒë·ªông Notion Clone...", "green")
        subprocess.run(["uv", "run", "python", "main.py"])
        
    except Exception as e:
        print_colored(f"‚ùå L·ªói ch·∫°y v·ªõi UV: {e}", "red")
        return False
    return True

def run_with_system_python():
    """Ch·∫°y v·ªõi system Python (fallback)"""
    try:
        print_colored("‚ö†Ô∏è Ch·∫°y v·ªõi system Python (kh√¥ng khuy·∫øn ngh·ªã)", "yellow")
        print_colored("üí° C√†i ƒë·∫∑t UV ƒë·ªÉ c√≥ tr·∫£i nghi·ªám t·ªët h∆°n: https://docs.astral.sh/uv/", "cyan")
        
        # Ki·ªÉm tra PySide6
        result = subprocess.run([sys.executable, "-c", "import PySide6"], capture_output=True)
        if result.returncode != 0:
            print_colored("‚ùå PySide6 kh√¥ng c√≥ s·∫µn trong system Python", "red")
            print_colored("H√£y c√†i ƒë·∫∑t: pip install PySide6", "yellow")
            return False
        
        print_colored("üöÄ Kh·ªüi ƒë·ªông Notion Clone...", "green")
        subprocess.run([sys.executable, "main.py"])
        
    except Exception as e:
        print_colored(f"‚ùå L·ªói ch·∫°y v·ªõi system Python: {e}", "red")
        return False
    return True

def main():
    """Main launcher function"""
    print_colored("üéØ Notion Clone Smart Launcher", "purple")
    print_colored("=" * 50, "cyan")
    
    # Ki·ªÉm tra trong ƒë√∫ng th∆∞ m·ª•c
    if not os.path.exists("main.py"):
        print_colored("‚ùå Kh√¥ng t√¨m th·∫•y main.py", "red")
        print_colored("H√£y ch·∫°y launcher trong th∆∞ m·ª•c Notion project", "yellow")
        input("Nh·∫•n Enter ƒë·ªÉ tho√°t...")
        return
    
    # Th·ª≠ UV tr∆∞·ªõc
    if check_uv():
        print_colored("‚úÖ UV environment detected", "green")
        if run_with_uv():
            return
    
    # Fallback sang system Python
    if check_python():
        print_colored("‚úÖ System Python detected", "yellow")
        if run_with_system_python():
            return
    
    # Kh√¥ng c√≥ Python n√†o
    print_colored("‚ùå Kh√¥ng t√¨m th·∫•y Python environment", "red")
    print_colored("H√£y c√†i ƒë·∫∑t:", "yellow")
    print_colored("1. UV: https://docs.astral.sh/uv/getting-started/installation/", "cyan")
    print_colored("2. Python: https://www.python.org/downloads/", "cyan")
    
    input("Nh·∫•n Enter ƒë·ªÉ tho√°t...")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print_colored("\nüëã T·∫°m bi·ªát!", "green")
    except Exception as e:
        print_colored(f"\n‚ùå L·ªói kh√¥ng mong mu·ªën: {e}", "red")
        input("Nh·∫•n Enter ƒë·ªÉ tho√°t...")
